#compdef sum cksum shasum sha1sum sha224sum sha256sum sha384sum sha512sum
#
# --------------------------------------------------------------------------
#
# Description :
#   @(#) zsh completion script for sum cksum shasum sha1sum sha224sum sha256sum sha384sum sha512sum
#
# --------------------------------------------------------------------------
# Copyright (c) 2015 camisoul<camisoulmax@gmail.com>
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
# --------------------------------------------------------------------------

local ret=1

local -a args
local file_mode='-0 --01 -b --binary -t --text -p --portable'
case $service in
  sum)
    args=(
    '(-s --sysv -r)-r[use BSD sum algorithm, use 1K blocks]'
    '(-s --sysv -r)'{-s,--sysv}'[use System V sum algorithm, use 512 bytes blocks]'
    )
    ;;
  cksum)
    args=()
    ;;
  sha*sum)
    args=(
    "(${file_mode})"{-b,--binary}'[read in binary mode]'
    "(${file_mode})"{-t,--text}'[read in text mode (default)]'
    '(-c --check)'{-c,--check}"[read ${(U)service%sum} sums from the FILEs and check them]"
    '(-w --warn)'{-w,--warn}'[warn about improperly formatted checksum lines]'
    '--status[do not output anything, status code shows success]'
    )
    if [[ $service == shasum ]]; then
      args=(
      ${args[@]}
      "($file_mode)"{-p,--portable}'[read in portable mode]'
      "($file_mode)"{-0,--01}'[read in BITS mode]'
      '(-a --algorithm)'{-a,--algorithm}'[1 (default)]:value:(1 224 256 384 512 512224 512256)'
      )
    else
      args=(
      ${args[@]}
      '--tag[create a BSD-style checksum]'
      '--quiet[do not print OK for each successfully verified file]'
      '--strict[with --check, exit non-zero for any invalid input]'
      )
    fi
    ;;
esac

_arguments -s -S \
  ${args[@]} \
  '(- : *)--help[display help and exit]' \
  '(- : *)--version[output version information and exit]' \
  '::FILE:_files' && ret=0

return ret
