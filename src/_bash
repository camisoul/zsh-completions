#compdef bash
#
# --------------------------------------------------------------------------
#
# Description :
#   @(#) zsh completion script for bash
#
# --------------------------------------------------------------------------
# Copyright (c) 2015 camisoul<camisoulmax@gmail.com>
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
# --------------------------------------------------------------------------

# FIXME:2015-08-22:コマンドのあとにはコマンドに対する補完をしたい

local ret=1

local shopts='autocd cdable_vars cdspell checkhash checkjobs checkwinsize cmdhist compat31 compat32 compat40 compat41 compat42 complete_fullquote direxpand dirspell dotglob execfail expand_aliases extdebug extglob extquote failglob force_fignore globasciiranges globstar gnu_errfmt histappend histreedit histverify hostcomplete huponexit interactive_comments lastpipe lithist login_shell mailwarn no_empty_cmd_completion nocaseglob nocasematch nullglob progcomp promptvars restricted_shell shift_verbose sourcepath xpg_echo'
local -A setopts
setopts=(
  a allexport
  b notify
  e errexit
  f noglob
  h hashall
  k keyword
  m monitor
  n noexec
  p privileged
  t onecmd
  u nounset
  v verbose
  x xtrace
  B braceexpand
  C noclobber
  E errtrace
  H histexpand
  P physical
  T functrace
)
local -a args
args=(
  '(- : *)--help'
  '(- : *)--version'
  '--debugger[arrange for the debugger profile to be executed before the shell starts]'
  '(-D --dump-strings)--dump-po-strings[equivalent to -D, but the output is in the GNU gettext po file format]'
  '(-D --dump-strings --dump-po-strings)'{-D,--dump-strings}'[dump strings]'
  '(-l --login)'{-l,--login}'[make bash act as if it had been invoked as a login shell]'
  '(--rcfile --init-file --norc)'{--rcfile,--init-file}'[execute commands from file instead of rc file]:file:_files'
  '--noediting[do not use the GNU readline library]'
  '--noprofile[do not read login and profile files]'
  '(--rcfile --init-file)--norc[do not read bashrc files]'
  '--posix[change the behavior of bash to posix mode]'
  '(-r --restricted)'{-r,--restricted}'[restricted shell]'
  '--verbose[equivalent to -v]'
  '-i[interactive]'
  "*-O[sets the value]:shopt:(${shopts})"
  "*+O[unsets the value]:shopt:(${shopts})"
)
for opts in ${(k)setopts[@]}
do
  args+=("-${opts}[equivalent to -o ${setopts[$opts]}]")
  args+=("+${opts}[equivalent to +o ${setopts[$opts]}]")
done
args+=("*-o:set option-name:(${setopts})")
args+=("*+o:unset option-name:(${setopts})")

case ${words[2]} in
  -c)
    args+=('*:command string:_command_names -e')
    ;;
  *)
    args+=('*:file:_files')
    ;;
esac

if [[ $CURRENT -eq 2 ]]; then
  _arguments -s -S \
    '-c[read commands from the commad_string]' \
    '-s[stdin]' \
    ${args[@]} && ret=0
else
  _arguments -s -S ${args[@]} && ret=0
fi

return ret
