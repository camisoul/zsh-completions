#compdef apg
#
# --------------------------------------------------------------------------
#
# Description :
#   @(#) zsh completion script for apg
#
# --------------------------------------------------------------------------
# Copyright (c) 2015 camisoul<camisoulmax@gmail.com>
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
# --------------------------------------------------------------------------


local ret=1

_arguments \
  '-E[exclude characters from password generation process]:char_string' \
  '-M[new style password modes]:mode:->pass_modes' \
  '-r[apply dictionary check against file]:file:_files' \
  '-b[apply bloom filter check against filter_file]:filter_file:_files' \
  '-p[paranoid modifier for bloom filter check]:substr_len' \
  '-a[choose algorithm]:algorithm:->algorithm' \
  '-n[generate num_of_pass passwords]:num_of_pass' \
  '-m[minimum password length]:min_pass_len' \
  '-x[maximum password length]:max_pass_len' \
  '-c[use cl_seed as a random seed for password]:cl_seed' \
  '-s[ask user for a random seed for password generation]' \
  '-d[do NOT use any delimiters between generated passwords]' \
  '-l[spell generated password]' \
  '-t[print pronunciation for generated pronounceable password]' \
  '-y[print crypted passwords]' \
  '-q[quiet mode (do not print warnings)]' \
  '-h[print this help screen]' \
  '-v[print version information]' && ret=0

case $state in
  pass_modes)
    _values 'password mode' \
      'S[generator must use special symbol]' \
      's[generator should use special symbol]' \
      'N[generator must use numeral symbol]' \
      'n[generator should use numeral symbol]' \
      'C[generator must use capital symbol]' \
      'c[generator should use capital symbol]' \
      'L[generator must use small letters symbol]' \
      'l[generator should use small letters symbol]' && ret=1
    ;;
  algorithm)
    _values 'algorithm' \
      '0[pronounceable password generation (default)]' \
      '1[random character password generation]' && ret=1
    ;;
esac
return ret
