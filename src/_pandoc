#compdef pandoc
#
# --------------------------------------------------------------------------
#
# Description :
#   @(#) zsh completion script for pandoc
#
# --------------------------------------------------------------------------
# Copyright (c) 2015 camisoul<camisoulmax@gmail.com>
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
# --------------------------------------------------------------------------

local ret=1
local -a general_opts reader_opts general_writer_opts specific_writers_opts citation_opts math_rendering_opts wrapper_opts

general_opts=(
  '(* 1 -)'{-v,--version}'[print version]'
  '(* 1 -)'{-h,--help}'[show usage message]'
  '--verbose[give verbose debugging output]'
  '(-f -r --from --read)'{-f,-r,--from=,--read=}'[specify input format]:FORMAT:->iformats'
  '(-t -w --to --write)'{-t,-w,--to=,--write=}'[specify output format]:FORMAT:->oformats'
  '(-o --output)'{-o,--output=}'[write output to FILE]:FILE:_files'
  '--data-dir=[specify the user data directory]:DIRECTORY:_directories'
  )

reader_opts=(
  '(-R --parse-raw)'{-R,--parse-raw}'[parse untranslatable HTML cods and LaTex environments as raw HTML or LaTeX]'
  '(-S --smart)'{-S,--smart}'[produce typographically correct]'
  '--old-dashes[selects the pandoc <= 1.8.2.1 behavior for parsing smart dashes]'
  '--base-header-level=[specify the base level for headers]:NUMBER'
  '--indented-code-classes=[specify classes to use for indented code blocks]:CLASSES'
  '--default-image-extension=[specify a default extension to use when image paths/URLs have no extension]:EXTENSION'
  '--filter=[specify an executable to be used as a filter transforming the Pandoc AST]:EXECUTABLE:_command_names -e'
  '(-M --metadata)*'{-M,--metadata=}'[set the metadata field KEY to the value VAL]:KEY[\:VAL]:->keys'
  '--normalize[normalize the document after reading]'
  '(-p --preserve-tabs)'{-p,--preserve-tabs}'[preserve tabs instead of converting them to spaces]'
  '--tab-stop=[specify the number of spaces per tab]:NUMBER'
  '--track-changes=[specifies what to do with insertions and deltions produced by th MS Word track-changes feature]:(accept reject all)'
  '--extract-media=[extract images and other media contained in a docx or epub container to the path DIR]:DIR:_directories'
  )

general_writer_opts=(
  '(-s --standalone)'{-s,--standalone}'[produce output with an appropriate header and fotter]'
  '--template=[use FILE as a custom template]:FILE:_files'
  '(-V --variable)*'{-V,--variable=}'[set the template variable KEY to the value VAL]:KEY[\:VAL]:->keys'
  '(-D --print-default-template)*'{-D,--print-default-template=}"[print the default template fo an output FORMAT]:FORMAT:->oformats"
  '--print-default-data-file=[print a default data file]:FILE:_files'
  '--no-wrap[disable text wrapping in output]'
  '--columns=[specify length of lines]:NUMBER'
  '(-toc --table-of-contents)'{--toc,--table-of-contents}'[include an automatically generated table of contents]'
  '--toc-depth=[specify the number of section levels to include in the table of contents]:NUMBER'
  '--no-highlight[disables syntax highlighting]'
  '--highlight-style=[specifies the coloring style]:STYLE:(pygments kate monochrome espresso zenburn haddock tango)'
  '(-H --include-in-header)'{-H,--include-in-header=}'[include contents of FILE, verbatim, at the end of the header]:FILE:_files'
  '(-B --include-before-body)'{-B,--include-before-body=}'[include contents of FILE, verbatim, at the begining of the document body]:FILE:_files'
  '(-A --include-after-body)'{-A,--include-after-body=}'[include contents of FILE, verbatim, at the end of the document body]:FILE:_files'
  )

specific_writers_opts=(
  '--self-contained[produce a standalone HTML file with no external dependencies]'
  '--html-q-tags[use <q> tags for quotes in HTML]'
  '--ascii[use only ascii characters in output]'
  '--refernce-links[use reference -style links, rather than inline links, in writing markdown or reStructured Text]'
  '--atx-headers[use ATX style headers in markdown and asciidoc output]'
  '--chapters[treat top-level headers as chapters]'
  '(-N --number-sections)'{-N,--number-sections}'[number section headings in LaTeX,ConTeXt, HTML, or EPUB output]'
  '--number-offset=[offset for section hedings in HTML output]:NUMBER:->offset'
  '--no-tex-ligatures[do not convert quotation marks, apostrophes, and dashes to the TeX ligatures when writing LaTeX or GonTeXt]'
  '--listings[use listings package for LaTeX code blocks]'
  '(-i --incremental)'{-i,--incremental}'[make list items in slide shows display incrementally]'
  '--slide-level=[specifies that headers with the specified level creates slides]:NUMBER'
  '--sections-divs[wrap sections in <div> tags]'
  '--email-obfuscations=[specify a method for obfuscating mailto: links in HTML documents]:obfuscation:(none javascript references)'
  '--id-prefix=[specify a prefix to be added to all automatically generated identifiers in HTML and DocBook, and footnote in output]:STRING'
  '(-T --title-prefix)'{-T,--title-prefix=}'[specify STRING as prefix at the beginning of the title]:STRING'
  '(-c --css)'{-c,--css=}'[Link to a CSS style sheet]:URL:->uris'
  '--reference-obt=[use the specified file as a style reference in producing an ODT]:FILE:_files'
  '--reference-docx=[use the specified file as a style reference in producing a docx file]:FILE:_files'
  '--epub-stylesheet=[use the specified CSS file to tyle the EPUB]:FILE:_files'
  '--epub-cover-image=[use the specified image as the EPUB cover]:FILE:_files'
  '--epub-metadata=[look in the specified XML file]:FILE:_files'
  '--epub-embed-font=[embed the specified font in the EPUB]:FILE:_files'
  '--epub-chapter-level=[specify the header level at which to split the EPUB]:NUMBER'
  '--latex-engine=[use the specified LaTeX engine when producing PDF output]:engine:(pdflatex lualatex xelatex)'
  '--latex-engine-opt=[use the given string as a command-line argument to the latex-engine]:STRING'
  )

citation_opts=(
  '--bibliography=[set the bibliography field]:FILE:_files'
  '--csl=[set the csl field]:FILE:_files'
  '--citation-abbreviations=[set the citation-abbreviations field]:FILE:_files'
  '--natbib[use natbib for citations in LaTeX output]'
  '--biblatex[use biblatex for citations in LaTeX output]'
  )

math_rendering_opts=(
  '(-m --latexmathml)'{-m,--latexmathml=-}'[use LaTeXMathML to display embedded TeX math in HTML output]:URL:->uris'
  '--mathml=-[convert TeX math to MathML]:URL:->uris'
  '--jsmath=-[use jsMath to display embedded TeX math in HTML output]:URL:->uris'
  '--mathjax=-[use MathJax to display embedded TeX math in HTML output]:URL:->uris'
  '--gladtex[enclose TeX math in <eq> tags in HTML output]'
  '--mimetex=-[render TeX math using the mimeTeX CGI script]:URL:->uris'
  '--webtex=-[render TeX formulas using an external script]:URL:->uris'
  '--katex=-[render TeX formulas using an external script]:URL:->uris'
  '--katex-stylesheet=[render TeX formulas using an external script]:URL:->uris'
  )

wrapper_opts=(
  '--dump-args[print information about command-line arguments to stdout, then exit]'
  '--ignore-args[ignore command-line arguments]'
  )

_arguments -s -S \
  ${general_opts[@]} \
  ${reader_opts[@]} \
  ${general_writer_opts[@]} \
  ${specific_writers_opts[@]} \
  ${citation_opts[@]} \
  ${math_rendering_opts[@]} \
  ${wrapper_opts[@]} \
  '*:input file or URI:->uris' && ret=0


function scan_help {
  local flag=false
  local str
  _call_program commands "${words[1]}" --help | while read -r line; do
    if [[ ${line} =~ "${1}" ]]; then
      flag=true
    fi
    if ${flag}; then
      str+=${line}
      if [[ ${line} =~ [^,]$ ]]; then
        print "${${${${str#${1}}//\*/}//, /\n}//,/\n}"
        return 0
      fi
    fi
  done
}

if [[ ${state} == *formats ]]; then
  case ${state} in
    iformats)
      local section="Input formats:  "
      ;;
    oformats)
      local section="Output formats: "
      ;;
  esac
  _values 'formats' $(scan_help "${section}") && ret=0
elif [[ ${state} == offset ]]; then
  compset -P \*,
  compset -S ,\*
  _message -e number 'number' && ret=0
elif [[ ${state} == uris ]]; then
  _alternative \
    'files:file:_files' \
    'urls:url:_urls' && ret=0
elif [[ ${state} == keys ]]; then
  compset -P '*:'
  _message -e key 'KEY[:VALUE]' && ret=0
fi

return ret
